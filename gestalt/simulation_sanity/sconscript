# Just an scons to run through the entire pipeline and check things work
# Also very simple tests for consistency

import os

from os.path import join
from nestly.scons import SConsWrap
from nestly import Nest
from SCons.Script import Environment, Command, AddOption
import numpy as np

Import('env')
localenv = env.Clone()

# Set up state
base = {'nreps': localenv['NREPS'],
        'output_name': localenv['OUTPUT_NAME']}

nest = SConsWrap(Nest(base_dict=base), '_'+localenv['OUTPUT_NAME'], alias_environment=localenv)

nest.add(
    'seed',
    range(5,6),
    label_func=lambda c: "seed%d" % c,
)

nest.add(
    'setting',
    ['one_leaf', 'stupid_cherry'])

@nest.add_target_with_env(localenv)
def generate(env, outdir, c):
    cmd = [
        'python generate_data.py',
        "--is-%s" % c['setting'].replace("_", "-"),
        '--sampling 1',
        '--model-seed',
        c['seed'],
        '--data-seed',
        c['seed'],
        '--out-obs-file ${TARGETS[0]}',
        '--out-model-file ${TARGETS[1]}',
        '--log-file ${TARGETS[2]}',
        '--target-lambda 0.5,0.4',
        '--double 0.000001',
        '--time 1',
        '--num-barcodes',
        400,
        '--min-uniq-alleles',
        0,
        '--max-uniq-alleles',
        10,
        '--max-abundance 40',
        '--perturb-target 0'
    ]
    return env.Command(
        [
            join(outdir, 'obs_data.pkl'),
            join(outdir, 'true_model.pkl'),
            join(outdir, 'log.txt')],
        [],
        ' '.join(map(str, cmd)))

nest.add(
    'num_barcodes',
    [100],
    label_func=lambda c: "num_barcodes%d" % c,
)

@nest.add_target_with_env(localenv)
def restrict_observed_alleles(env, outdir, c):
    cmd = [
        'python restrict_observed_barcodes.py',
        '--obs-file ${SOURCES[0]}',
        '--model-file ${SOURCES[1]}',
        '--num-barcodes',
        c['num_barcodes'],
        '--out-obs-file ${TARGETS[0]}',
        '--out-collapsed-tree-file ${TARGETS[1]}',
        '--log-file ${TARGETS[2]}',
    ]
    return env.Command(
        [
            join(outdir, 'obs_data.pkl'),
            join(outdir, 'collapsed_tree.pkl'),
            join(outdir, 'log_restrict.txt')],
        c['generate'],
        ' '.join(map(str, cmd)))

@nest.add_target_with_env(localenv)
def run_parsimony(env, outdir, c):
    cmd = [
        'python get_collapsed_oracle.py',
        '--obs-data-pkl ${SOURCES[0]}',
        '--out-template-file ${TARGETS[0]}',
        '--true-model-pkl ${SOURCES[1]}',
    ]
    return env.Command(
        [
            join(outdir, 'oracle_tree0.pkl')],
        [
            c['restrict_observed_alleles'][0],
            c['restrict_observed_alleles'][1]],
        ' '.join(map(str, cmd)))

@nest.add_target_with_env(localenv)
def run_MLE(env, outdir, c):
    cmd = [
        'python run_estimator.py',
        '--obs-file ${SOURCES[0]}',
        '--topology-file ${SOURCES[1]}',
        '--true-model-file ${SOURCES[2]}',
        '--true-collapsed-tree-file ${SOURCES[3]}',
        '--seed',
	c['seed'] + 100,
        '--log-barr 0.001',
        '--target-lam-pens 0.4',
        '--max-sum-states 2000',
        '--max-extra-steps 2',
        '--max-iters 10000',
        '--intercept-lambda-known',
        #'--tot-time',
        #'--lambda-known',
    ]
    return env.Command(
        [
            join(outdir, 'oracle_tree0_fitted.pkl')],
        [
            c['restrict_observed_alleles'][0],
            c['run_parsimony'][0],
            c['generate'][1],
            c['restrict_observed_alleles'][1]],
        ' '.join(map(str, cmd)))
