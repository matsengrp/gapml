# Just an scons to run through the entire pipeline and check things work

import os

from os.path import join
from nestly.scons import SConsWrap
from nestly import Nest
from SCons.Script import Environment, Command, AddOption
import numpy as np

Import('env')
localenv = env.Clone()

# Set up state
base = {'nreps': localenv['NREPS'],
        'output_name': localenv['OUTPUT_NAME']}

nest = SConsWrap(Nest(base_dict=base), '_'+localenv['OUTPUT_NAME'], alias_environment=localenv)

nest.add(
    'seed',
    range(1),
    label_func=lambda c: "seed%d" % c,
)

@nest.add_target_with_env(localenv)
def generate(env, outdir, c):
    cmd = [
        'python generate_data.py',
        '--model-seed',
        c['seed'],
        '--data-seed',
        c['seed'],
        '--out-obs-file ${TARGETS[0]}',
        '--out-model-file ${TARGETS[1]}',
        '--log-file ${TARGETS[2]}',
        '--time 1.8',
        '--num-barcodes',
        2,
        '--min-uniq-alleles',
        5,
        '--max-uniq-alleles',
        12,
        '--max-abundance 10'
    ]
    return env.Command(
        [
            join(outdir, 'obs_data.pkl'),
            join(outdir, 'true_model.pkl'),
            join(outdir, 'log.txt')],
        [],
        ' '.join(map(str, cmd)))

nest.add(
    'num_barcodes',
    [2],
    label_func=lambda c: "num_barcodes%d" % c,
)

@nest.add_target_with_env(localenv)
def restrict_observed_alleles(env, outdir, c):
    cmd = [
        'python restrict_observed_barcodes.py',
        '--obs-file ${SOURCES[0]}',
        '--model-file ${SOURCES[1]}',
        '--num-barcodes',
        c['num_barcodes'],
        '--out-obs-file ${TARGETS[0]}',
        '--out-collapsed-tree-file ${TARGETS[1]}',
        '--log-file ${TARGETS[2]}',
    ]
    return env.Command(
        [
            join(outdir, 'obs_data.pkl'),
            join(outdir, 'collapsed_tree.pkl'),
            join(outdir, 'log_restrict.txt')],
        c['generate'],
        ' '.join(map(str, cmd)))

@nest.add_target_with_env(localenv)
def run_parsimony(env, outdir, c):
    cmd = [
        'python get_parsimony_topologies.py',
        '--obs-file ${SOURCES[0]}',
        '--out-template-file ${TARGETS[0]}',
        '--log-file ${TARGETS[1]}',
        '--max-random',
        0,
        '--max-random-multifurc',
        1,
    ]
    return env.Command(
        [
            join(outdir, 'parsimony_tree0.pkl'),
            join(outdir, 'log_parsimony.txt')],
        c['restrict_observed_alleles'],
        ' '.join(map(str, cmd)))

@nest.add_target_with_env(localenv)
def run_MLE(env, outdir, c):
    cmd = [
        'python run_estimator.py',
        '--obs-file ${SOURCES[0]}',
        '--topology-file ${SOURCES[1]}',
        '--true-model-file ${SOURCES[2]}',
        '--true-collapsed-tree-file ${SOURCES[3]}',
        '--seed',
	c['seed'] + 100,
        '--log-barr 0.001',
        '--target-lam-pens 10.0,1.0',
        '--max-sum-states 50',
        '--max-extra-steps 1',
        '--max-iters 6',
    ]
    return env.Command(
        [
            join(outdir, 'parsimony_tree0_fitted.pkl')],
        [
            c['restrict_observed_alleles'][0],
            c['run_parsimony'][0],
            c['generate'][1],
            c['restrict_observed_alleles'][1]],
        ' '.join(map(str, cmd)))
