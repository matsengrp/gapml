# Just an scons to run through the entire pipeline and check things work
# Also very simple tests for consistency
# To test code works:
# (1) use a single target
# (2) use two targets but a super low target rate and super high double weight
# Test with lambda known and check the total time estimate
# (Can also test with unknown lambda and known total time)

import os

from os.path import join
from nestly.scons import SConsWrap
from nestly import Nest
from SCons.Script import Environment, Command, AddOption
import numpy as np

Import('env')
localenv = env.Clone()

# Set up state
base = {'nreps': localenv['NREPS'],
        'output_name': localenv['OUTPUT_NAME']}

nest = SConsWrap(Nest(base_dict=base), '_'+localenv['OUTPUT_NAME'], alias_environment=localenv)

nest.add(
    'seed',
    #range(5,6),
    [0],
    label_func=lambda c: "seed%d" % c,
)

nest.add(
    'setting',
    #['none'])
    ['one_leaf'])

@nest.add_target_with_env(localenv)
def generate(env, outdir, c):
    cmd = [
        'python generate_data.py',
        "--is-%s" % c['setting'].replace("_", "-") if c['setting'] != 'none' else '',
        '--sampling',
        1,
        '--model-seed',
        c['seed'],
        '--data-seed',
        c['seed'],
        '--out-obs-file ${TARGETS[0]}',
        '--out-model-file ${TARGETS[1]}',
        '--log-file ${TARGETS[2]}',
        '--target-lambda 0.003,0.003',
        '--double 100',
        #'--target-lambda 0.6',
        '--insert-poiss 4',
        '--insert-zero-prob 0.2',
        '--time 1',
        '--num-barcodes',
        200,
        '--birth-sync-rounds 2',
        '--birth-sync-time 0.4',
        '--birth-decay -8',
        '--birth-min 3',
        '--min-uniq-alleles',
        0,
        '--max-uniq-alleles',
        100,
        '--max-abundance 40',
        '--perturb-target 0',
        '--use-poisson',
    ]
    return env.Command(
        [
            join(outdir, 'obs_data.pkl'),
            join(outdir, 'true_model.pkl'),
            join(outdir, 'log.txt')],
        [],
        ' '.join(map(str, cmd)))

nest.add(
    'num_barcodes',
    [200],
    label_func=lambda c: "num_barcodes%d" % c,
)

@nest.add_target_with_env(localenv)
def restrict_observed_alleles(env, outdir, c):
    cmd = [
        'python restrict_observed_barcodes.py',
        '--obs-file ${SOURCES[0]}',
        '--num-barcodes',
        c['num_barcodes'],
        '--out-obs-file ${TARGETS[0]}',
        '--log-file ${TARGETS[1]}',
    ]
    return env.Command(
        [
            join(outdir, 'obs_data.pkl'),
            join(outdir, 'log_restrict.txt')],
        c['generate'],
        ' '.join(map(str, cmd)))

@nest.add_target_with_env(localenv)
def run_parsimony(env, outdir, c):
    if c['setting'] == 'none':
        # Regular tree simulated with many leaves
        cmd = [
            'python get_parsimony_topologies.py',
            '--obs-file ${SOURCES[0]}',
            '--out-template-file ${TARGETS[0]}',
            '--log-file ${TARGETS[1]}',
            '--max-random',
            0,
            '--max-random-multifurc',
            1,
            '--num-jumbles 1',
            '--max-trees 1',
        ]
        return env.Command(
            [
                join(outdir, 'parsimony_tree0.pkl'),
                join(outdir, 'log_parsimony.txt')],
            [
                c['restrict_observed_alleles'][0]],
            ' '.join(map(str, cmd)))
    else:
        # Deal with special case where the tree
        # only has one or two leaves
        cmd = [
            'python get_collapsed_oracle.py',
            '--obs-data-pkl ${SOURCES[0]}',
            '--out-template-file ${TARGETS[0]}',
            '--true-model-pkl ${SOURCES[1]}',
        ]
        return env.Command(
            [
                join(outdir, 'oracle_tree0.pkl')],
            [
                c['restrict_observed_alleles'][0],
                c['generate'][1]],
            ' '.join(map(str, cmd)))

@nest.add_target_with_env(localenv)
def run_MLE(env, outdir, c):
    cmd = [
        'python tune_topology.py',
        '--obs-file ${SOURCES[0]}',
        '--topology-file ${SOURCES[1]}',
        '--true-model-file ${SOURCES[2]}',
        '--out-model-file ${TARGETS[0]}',
        '--log-file ${TARGETS[1]}',
        '--seed',
	c['seed'] + 10,
        '--branch-pen',
        '1', #100,20',
        '--target-lam-pen',
        '1',
        '--max-sum-states 10',
        '--max-extra-steps 10',
        '--max-iters 50000',
        '--num-penalty-tune-splits 2',
        '--num-penalty-tune-iters 1',
        '--num-chad-tune-iters 3',
        '--max-chad-tune-search 0',
        '--num-init-random-rearrange 0',
        '--tot-time-known',
        '--lambda-known',
        '--lambda-decay-known',
        '--use-poisson',
    ]
    return env.Command(
        [
            join(outdir, 'fitted_pen.pkl'),
            join(outdir, 'fit_log_pen.txt'),
        ],
        [
            c['restrict_observed_alleles'][0],
            c['run_parsimony'][0],
            c['generate'][1]],
        ' '.join(map(str, cmd)))
