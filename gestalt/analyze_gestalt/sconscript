# Check that as we increase number of barcodes, we converge to the truth

import os

from os.path import join
from nestly.scons import SConsWrap
from nestly import Nest
from SCons.Script import Environment, Command, AddOption
import numpy as np

Import('env')
localenv = env.Clone()

# Set up state
base = {'nreps': localenv['NREPS'],
        'output_name': localenv['OUTPUT_NAME']}

nest = SConsWrap(Nest(base_dict=base), '_'+localenv['OUTPUT_NAME'], alias_environment=localenv)

FISH_DATA = {
    "ADR1": {
        "path": "/fh/fast/matsen_e/gestalt/fish_7B_UMI_collapsed_reads/fish_7B_UMI_collapsed_reads.txt",
        "bcode_min_pos": 122,
        "format": 0,
    },
    "30hpf1": {
        "path": "/fh/fast/matsen_e/gestalt/GSM2171798_embryos_1_1_v6.stats.txt",
        "bcode_min_pos": 126,
        "format": 2,
        "abund": 2,
    },
    "30hpf2": {
        "path": "/fh/fast/matsen_e/gestalt/GSM2171799_embryos_1_2_v6.stats.txt",
        "bcode_min_pos": 126,
        "format": 2,
        "abund": 1,
    },
    "30hpf3": {
        "path": "/fh/fast/matsen_e/gestalt/GSM2171800_embryos_1_3_v6.stats.txt",
        "bcode_min_pos": 126,
        "format": 2,
        "abund": 2,
    },
    "30hpf4": {
        "path": "/fh/fast/matsen_e/gestalt/GSM2171801_embryos_1_4_v6.stats.txt",
        "bcode_min_pos": 126,
        "format": 2,
        "abund": 1,
    },
    "30hpf5": {
        "path": "/fh/fast/matsen_e/gestalt/GSM2171802_embryos_1_5_v6.stats.txt",
        "bcode_min_pos": 126,
        "format": 2,
        "abund": 1,
    },
    "30hpf6": {
        "path": "/fh/fast/matsen_e/gestalt/GSM2171803_embryos_1_6_v6.stats.txt",
        "bcode_min_pos": 126,
        "format": 2,
        "abund": 1,
    },
    "30hpf7": {
        "path": "/fh/fast/matsen_e/gestalt/GSM2171804_embryos_1_7_v6.stats.txt",
        "bcode_min_pos": 126,
        "format": 2,
        "abund": 2,
    }
}

nest.add(
    'data',
    [
        #"ADR1",
        "30hpf1",
        "30hpf2",
        "30hpf3",
        "30hpf4",
        "30hpf5",
        "30hpf6",
        "30hpf7",
    ],
    label_func=lambda c: "%s_abund%d" % (c, FISH_DATA[c]['abund']),
)

#nest.add(
#    'abundance_thres',
#    [
#        FISH_DATA[c['data']]['abund'],
#    ],
#    label_func=lambda c: "min_abund_%d" % c,
#)

@nest.add_target_with_env(localenv)
def read_gestalt(env, outdir, c):
    cmd = [
        'python3 read_gestalt_data.py',
        '--reads-file',
        FISH_DATA[c['data']]['path'],
        '--reads-format',
        FISH_DATA[c['data']]['format'],
        '--bcode-min-pos',
        FISH_DATA[c['data']]['bcode_min_pos'],
        '--out-obs-data ${TARGETS[0]}',
        '--log-file ${TARGETS[1]}',
        '--abundance-thres',
        FISH_DATA[c['data']]['abund'],
	'--time 1',
    ]
    return env.Command(
        [
            join(outdir, 'fish_data.pkl'),
            join(outdir, 'log.txt')],
        [],
        ' '.join(map(str, cmd)))

@nest.add_target_with_env(localenv)
def restrict_observed_alleles(env, outdir, c):
    cmd = [
        'python3 restrict_observed_barcodes.py',
        '--obs-file ${SOURCES[0]}',
        '--num-barcodes 1',
        '--out-obs-file ${TARGETS[0]}',
        '--log-file ${TARGETS[1]}',
    ]
    return env.Command(
        [
            join(outdir, 'fish_data_restrict.pkl'),
            join(outdir, 'log_restrict.txt'),
	],
        c['read_gestalt'],
        ' '.join(map(str, cmd)))

@nest.add_target_with_env(localenv)
def run_parsimony(env, outdir, c):
    cmd = [
        'python3 get_parsimony_topologies.py',
        '--obs-file ${SOURCES[0]}',
        '--out-template-file ${TARGETS[0]}',
        '--log-file ${TARGETS[1]}',
        '--num-jumbles',
	1,
        '--max-random',
        0,
        '--max-trees',
        1,
        '--max-random-multifurc',
        1,
    ]
    return env.Command(
        [
            join(outdir, 'parsimony_tree0.pkl'),
            join(outdir, 'log_parsimony.txt'),
        ],
        c['restrict_observed_alleles'],
        ' '.join(map(str, cmd)))

@nest.add_target_with_env(localenv)
def run_chronos(env, outdir, c):
    cmd = [
        'python3 fit_chronos.py',
        '--seed 1',
        '--lambdas',
        '0.0001,0.001,0.01,0.1,1',
        '--obs-file ${SOURCES[0]}',
        '--topology-file ${SOURCES[1]}',
        '--out-model-file ${TARGETS[0]}',
        '--log-file ${TARGETS[1]}',
        '--num-init-random-rearrange 0',
        '--scratch-dir',
	join('analyze_gestalt', outdir, 'scratch'),
    ]
    return env.Command(
        [
            join(outdir, 'chronos_fitted.pkl'),
            join(outdir, 'chronos_fitted.txt')],
        [
            c['restrict_observed_alleles'][0],
            c['run_parsimony'][0]],
        ' '.join(map(str, cmd)))

nest.add(
    'sum_states',
    [10],
    label_func=lambda c: "sum_states_%d" % c,
)

nest.add(
    'extra_steps',
    [0],
    label_func=lambda c: "extra_steps_%d" % c,
)

@nest.add_target_with_env(localenv)
def run_MLE(env, outdir, c):
    penalty_params = "512,128,32,8"
    targ_lam_penalty_params = "10,1"
    cmd = [
        'python3 tune_topology.py',
        '--obs-file ${SOURCES[0]}',
        '--topology-file ${SOURCES[1]}',
        '--out-model-file ${TARGETS[0]}',
        '--log-file ${TARGETS[1]}',
        '--seed 400',
        '--branch-pen-params',
        penalty_params,
        '--target-lam-pen-params',
        targ_lam_penalty_params,
        '--num-penalty-tune-iters',
        1,
        '--num-penalty-tune-splits',
        4,
        '--max-fit-splits',
        4,
        '--num-chad-tune-iters',
        50,
        '--max-chad-tune-search',
        10,
        '--max-sum-states',
        c['sum_states'],
        '--max-extra-steps',
        c['extra_steps'],
        '--max-iters 50000',
        '--num-inits 1',
        '--tot-time-known',
        '--num-processes 4',
        '--num-init-random-rearrange 5',
    ]
    return env.Command(
        [
            join(outdir, 'tune_pen.pkl'),
            join(outdir, 'tune_pen_log.txt'),
	],
        [
            c['restrict_observed_alleles'][0],
            c['run_parsimony'][0],
	],
        ' '.join(map(str, cmd)))
