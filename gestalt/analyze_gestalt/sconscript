# Check that as we increase number of barcodes, we converge to the truth

import os

from os.path import join
from nestly.scons import SConsWrap
from nestly import Nest
from SCons.Script import Environment, Command, AddOption
import numpy as np

Import('env')
localenv = env.Clone()

# Set up state
base = {'nreps': localenv['NREPS'],
        'output_name': localenv['OUTPUT_NAME']}

nest = SConsWrap(Nest(base_dict=base), '_'+localenv['OUTPUT_NAME'], alias_environment=localenv)

FISH_DATA = {
    "ADR1": "/fh/fast/matsen_e/gestalt/fish_7B_UMI_collapsed_reads/fish_7B_UMI_collapsed_reads.txt",
}

nest.add(
    'data',
    ["ADR1"],
)

nest.add(
    'abundance_thres',
    [5],
    label_func=lambda c: "min_abund_%d" % c,
)

@nest.add_target_with_env(localenv)
def read_gestalt(env, outdir, c):
    cmd = [
        'python read_gestalt_data.py',
        '--reads-file',
        FISH_DATA[c['data']],
        '--out-obs-data ${TARGETS[0]}',
        '--log-file ${TARGETS[1]}',
        '--abundance-thres',
	c['abundance_thres'],
	'--time 1',
    ]
    return env.Command(
        [
            join(outdir, 'fish_data.pkl'),
            join(outdir, 'log.txt')],
        [],
        ' '.join(map(str, cmd)))

@nest.add_target_with_env(localenv)
def restrict_observed_alleles(env, outdir, c):
    cmd = [
        'python restrict_observed_barcodes.py',
        '--obs-file ${SOURCES[0]}',
        '--num-barcodes 1',
        '--out-obs-file ${TARGETS[0]}',
        '--log-file ${TARGETS[1]}',
    ]
    return env.Command(
        [
            join(outdir, 'fish_data_restrict.pkl'),
            join(outdir, 'log_restrict.txt'),
	],
        c['read_gestalt'],
        ' '.join(map(str, cmd)))

@nest.add_target_with_env(localenv)
def run_parsimony(env, outdir, c):
    cmd = [
        'python get_parsimony_topologies.py',
        '--obs-file ${SOURCES[0]}',
        '--out-template-file ${TARGETS[0]}',
        '--log-file ${TARGETS[1]}',
        '--num-jumbles',
	1,
        '--max-random',
        0,
        '--max-trees',
        1,
        '--max-random-multifurc',
        1,
    ]
    return env.Command(
        [
            join(outdir, 'parsimony_tree0.pkl'),
            join(outdir, 'log_parsimony.txt'),
        ],
        c['restrict_observed_alleles'],
        ' '.join(map(str, cmd)))

nest.add(
    'sum_states',
    [10],
    label_func=lambda c: "sum_states_%d" % c,
)

nest.add(
    'extra_steps',
    [0],
    label_func=lambda c: "extra_steps_%d" % c,
)

@nest.add_target_with_env(localenv)
def run_MLE(env, outdir, c):
    penalty_params = "1000,100,10"
    cmd = [
        'python tune_topology.py',
        '--obs-file ${SOURCES[0]}',
        '--topology-file ${SOURCES[1]}',
        '--out-model-file ${TARGETS[0]}',
        '--log-file ${TARGETS[1]}',
        '--seed 100',
        '--log-barr 0.0001',
        '--dist-to-half-pen-params',
        penalty_params,
        '--num-penalty-tune-iters',
        2,
        '--num-penalty-tune-splits',
        5,
        '--num-chad-tune-iters',
        100,
        '--max-chad-tune-search',
        20,
        '--max-sum-states',
        c['sum_states'],
        '--max-extra-steps',
        c['extra_steps'],
        '--max-iters 50000',
        '--num-inits 1',
        '--tot-time-known',
        '--num-processes 5',
        '--num-init-random-rearrange 10',
    ]
    return env.Command(
        [
            join(outdir, 'tune_topology.pkl'),
            join(outdir, 'tune_topology_log.txt'),
	],
        [
            c['restrict_observed_alleles'][0],
            c['run_parsimony'][0],
	],
        ' '.join(map(str, cmd)))
