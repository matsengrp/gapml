# Check that as we increase number of barcodes, we converge to the truth

import os

from os.path import join
from nestly.scons import SConsWrap
from nestly import Nest
from SCons.Script import Environment, Command, AddOption
import numpy as np

Import('env')
localenv = env.Clone()

# Set up state
nest = SConsWrap(Nest(), localenv['output'], alias_environment=localenv)
FOLDER_NAME = "analyze_gestalt"
MAX_LEAVES = 400

FISH_DATA = {
    "ADR1": {
        "path": "/fh/fast/matsen_e/gestalt/fish_7B_UMI_collapsed_reads/fish_7B_UMI_collapsed_reads.txt",
        "bcode_min_pos": 122,
        "format": 0,
        #"branch_pen_params": "512,128,32",
        #"target_lam_pen_params": "0.5,0.25,0.125",
        "branch_pen_params": "512",
        "target_lam_pen_params": "0.125",
        "merge": 4,
    },
    "ADR2": {
        "path": "/fh/fast/matsen_e/gestalt/GSE81713_fish_ADR2_PHYLIP_MIX_gte5_input.annotations.txt",
        "bcode_min_pos": 122,
        "format": 1,
        #"branch_pen_params": "512,128,32",
        #"target_lam_pen_params": "2,1,0.5,0.25",
        # Best pen params is 512 2
        "branch_pen_params": "512",
        "target_lam_pen_params": "2",
        "merge": 4,
    },
    "30hpf_v6_1": {
        "path": "/fh/fast/matsen_e/gestalt/GSM2171798_embryos_1_1_v6.stats.txt",
        "bcode_min_pos": 126,
        "format": 2,
        "branch_pen_params": "2048,512,128",
        "target_lam_pen_params": "8,2",
        # Iter 0: Best pen param 2048.000000 8.
        #"branch_pen_params": "2048",
        #"target_lam_pen_params": "8",
        "merge": 5,
    },
    "30hpf_v6_2": {
        "path": "/fh/fast/matsen_e/gestalt/GSM2171799_embryos_1_2_v6.stats.txt",
        "bcode_min_pos": 126,
        "format": 2,
        "branch_pen_params": "2048,512,128",
        "target_lam_pen_params": "8,2",
        "merge": 4,
    },
    "30hpf_v6_3": {
        "path": "/fh/fast/matsen_e/gestalt/GSM2171800_embryos_1_3_v6.stats.txt",
        "bcode_min_pos": 126,
        "format": 2,
        "branch_pen_params": "2048,512,128",
        "target_lam_pen_params": "8,2",
        "merge": 4,
    },
    "30hpf_v6_4": {
        "path": "/fh/fast/matsen_e/gestalt/GSM2171801_embryos_1_4_v6.stats.txt",
        "bcode_min_pos": 126,
        "format": 2,
        "branch_pen_params": "2048,512,128",
        "target_lam_pen_params": "8,2",
        #"branch_pen_params": "2048",
        #"target_lam_pen_params": "2",
        "merge": 4,
    },
    "30hpf_v6_5": {
        "path": "/fh/fast/matsen_e/gestalt/GSM2171802_embryos_1_5_v6.stats.txt",
        "bcode_min_pos": 126,
        "format": 2,
        "branch_pen_params": "2048,512,128",
        "target_lam_pen_params": "8,2",
        # Best was 2048 2
        #"branch_pen_params": "2048",
        #"target_lam_pen_params": "2",
        "merge": 4,
    },
    "30hpf_v6_6": {
        "path": "/fh/fast/matsen_e/gestalt/GSM2171803_embryos_1_6_v6.stats.txt",
        "bcode_min_pos": 126,
        "format": 2,
        "branch_pen_params": "2048,512,128",
        "target_lam_pen_params": "8,2",
        "merge": 4,
    },
    "30hpf_v6_7": {
        "path": "/fh/fast/matsen_e/gestalt/GSM2171804_embryos_1_7_v6.stats.txt",
        "bcode_min_pos": 126,
        "format": 2,
        "branch_pen_params": "2048,512,128",
        "target_lam_pen_params": "8,2",
        "merge": 4,
    },
    "30hpf_v6_8": {
        "path": "/fh/fast/matsen_e/gestalt/GSM2171805_embryos_1_8_v6.stats.txt",
        "bcode_min_pos": 126,
        "format": 2,
        "branch_pen_params": "2048,512,128",
        "target_lam_pen_params": "8,2",
        "merge": 4,
    },
    # V7 timecourse experiments, Only the 1x concentration experiments
    "dome1": {
        "path": "/fh/fast/matsen_e/gestalt/GSM2171788_Dome_1_1x.stats.txt",
        "bcode_min_pos": 122,
        "format": 2,
        "branch_pen_params": "2048,512,128",
        "target_lam_pen_params": "8,2",
        "merge": 4,
    },
    "dome3": {
        "path": "/fh/fast/matsen_e/gestalt/GSM2171791_Dome_3_1x.stats.txt",
        "bcode_min_pos": 122,
        "format": 2,
        #"branch_pen_params": "2048,512,128",
        #"target_lam_pen_params": "8,2",
        "branch_pen_params": "128",
        "target_lam_pen_params": "8",
        "merge": 4,
    },
    "dome5": {
        "path": "/fh/fast/matsen_e/gestalt/GSM2171793_Dome_5_1x.stats.txt",
        "bcode_min_pos": 122,
        "format": 2,
        "branch_pen_params": "2048,512,128",
        "target_lam_pen_params": "8,2",
        "merge": 4,
    },
    "dome8": {
        "path": "/fh/fast/matsen_e/gestalt/GSM2171796_Dome_8_1x.stats.txt",
        "bcode_min_pos": 122,
        "format": 2,
        "branch_pen_params": "2048,512,128",
        "target_lam_pen_params": "8,2",
        "merge": 4,
    },
    "dome9": {
        # There are only 15 alleles -- do not analyze this fish
    },
    "dome10": {
        "path": "/fh/fast/matsen_e/gestalt/GSM2171790_Dome_10_1x.stats.txt",
        "bcode_min_pos": 122,
        "format": 2,
        #"branch_pen_params": "2048,512,128",
        #"target_lam_pen_params": "8,2",
        "branch_pen_params": "128",
        "target_lam_pen_params": "8",
        "merge": 4,
    },
    "epi90_2": {
        "path": "/fh/fast/matsen_e/gestalt/GSM2171814_epi90_2_1x.stats.txt",
        "bcode_min_pos": 122,
        "format": 2,
        "branch_pen_params": "512,128,32",
        "target_lam_pen_params": "16,8,4",
        "merge": 4,
    },
    "epi90_5": {
        "path": "/fh/fast/matsen_e/gestalt/GSM2171816_epi90_5_1x.stats.txt",
        "bcode_min_pos": 122,
        "format": 2,
        "branch_pen_params": "512,128,32",
        "target_lam_pen_params": "16,8,4",
        "merge": 4,
    },
    "epi90_8": {
        "path": "/fh/fast/matsen_e/gestalt/GSM2171817_epi90_8_1x.stats.txt",
        "bcode_min_pos": 122,
        "format": 2,
        "branch_pen_params": "512,128,32",
        "target_lam_pen_params": "16,8,4",
        "merge": 4,
    },
    "epi90_9": {
        "path": "/fh/fast/matsen_e/gestalt/GSM2171819_epi90_9_1x.stats.txt",
        "bcode_min_pos": 122,
        "format": 2,
        "branch_pen_params": "512,128,32",
        "target_lam_pen_params": "16,8,4",
        "merge": 4,
    },
    "epi90_10": {
	# Too few leaves
        "path": "/fh/fast/matsen_e/gestalt/GSM2171810_epi90_10_1x.stats.txt",
    },
    "epi90_12": {
        "path": "/fh/fast/matsen_e/gestalt/GSM2171812_epi90_12_1x.stats.txt",
        "bcode_min_pos": 122,
        "format": 2,
        "branch_pen_params": "512,128,32",
        "target_lam_pen_params": "16,8,4",
        "merge": 5,
    },
    # 3day fish experiments, only concetration 1x
    "3day1": {
        # Has 2745 leaves
        "path": "/fh/fast/matsen_e/gestalt/GSM2171723_3d_1_1x.stats.txt",
        "bcode_min_pos": 122,
        "format": 2,
        "branch_pen_params": "512,128",
        "target_lam_pen_params": "4,2",
        "merge": 5,
    },
    "3day2": {
        # Has 947 leaves
        "path": "/fh/fast/matsen_e/gestalt/GSM2171727_3d_2_1x.stats.txt",
        "bcode_min_pos": 122,
        "format": 2,
        #"branch_pen_params": "2048,512,128",
        #"target_lam_pen_params": "8,2",
        "branch_pen_params": "512",
        "target_lam_pen_params": "2",
        "merge": 5,
    },
    "3day3": {
        "path": "/fh/fast/matsen_e/gestalt/GSM2171729_3d_3_1x.stats.txt",
        "bcode_min_pos": 122,
        "format": 2,
        #"branch_pen_params": "2048,512,128",
        #"target_lam_pen_params": "8,2",
        "branch_pen_params": "128,64",
        "target_lam_pen_params": "8",
        "merge": 5,
    },
    "3day4": {
        "path": "/fh/fast/matsen_e/gestalt/GSM2171731_3d_4_1x.stats.txt",
        "bcode_min_pos": 122,
        "format": 2,
        "branch_pen_params": "512,128",
        "target_lam_pen_params": "8,2",
        "merge": 5,
    },
    "3day5": {
        "path": "/fh/fast/matsen_e/gestalt/GSM2171733_3d_5_1x.stats.txt",
        "bcode_min_pos": 122,
        "format": 2,
        "branch_pen_params": "512,128",
        "target_lam_pen_params": "8,2",
        "merge": 5,
    },
    "3day6": {
        "path": "/fh/fast/matsen_e/gestalt/GSM2171735_3d_6_1x.stats.txt",
        "bcode_min_pos": 122,
        "format": 2,
        "branch_pen_params": "512,128",
        "target_lam_pen_params": "8,2",
        "merge": 5,
    },
}

def extract_template(path_list, fishies, outdir):
    fish_ex = [path for path in path_list if any([fish in path for fish in fishies])][0]
    return join(FOLDER_NAME, outdir, "%s", fish_ex.replace("_output/%s/" % fishies[0], ""))

nest.add_aggregate('obs_files', list)
nest.add_aggregate('MLE_res', list)
nest.add_aggregate('chronos_res', list)
nest.add_aggregate('nj_res', list)

nest.add(
    'data',
    [
        "ADR1", # DONE
        "ADR2", # DONE
        #"30hpf_v6_1", # failed?
        #"30hpf_v6_2", # failed?
        #"30hpf_v6_3", # failed?
        #"30hpf_v6_4", # failed
        "30hpf_v6_5", # DONE
        ##"30hpf_v6_6", # DONE
        #"30hpf_v6_7", # failed
        #"30hpf_v6_8", # failed?
        "dome1", # DONE
        ##"dome3", # DONE
        ##"dome5",  # running
        ##"dome8",  # DONE
        #"dome10", # failed
        "epi90_2", # DONE
        ##"epi90_5", # DONE
        ##"epi90_8", # DONE
        #"epi90_9", # failed
        ##"epi90_12", # DONE
        #"3day1", # failed
        "3day2", # DONE
        ##"3day3", # DONE
        ##"3day4",  ## running
        ##"3day5", ## running
        #"3day6", # FAILED
    ],
)

@nest.add_target_with_env(localenv)
def read_gestalt(env, outdir, c):
    targets = [
            join(outdir, 'fish_data.pkl'),
            join(outdir, 'log.txt')]
    cmd = [
        'python3 read_gestalt_data.py',
        '--seed 0',
        '--reads-file',
        FISH_DATA[c['data']]['path'],
        '--reads-format',
        FISH_DATA[c['data']]['format'],
        '--bcode-min-pos',
        FISH_DATA[c['data']]['bcode_min_pos'],
        '--out-obs-data ${TARGETS[0]}',
        '--log-file ${TARGETS[1]}',
        '--abundance-thres 1',
	'--time 1',
	'--merge',
        FISH_DATA[c['data']]['merge'],
    ]
    c['obs_files'].append(targets[0])
    return env.Command(
        targets,
        [],
        ' '.join(map(str, cmd)))

nest.add(
    'sampling_seed',
    [0],
    label_func=lambda c: "sampling_seed%d" % c)

@nest.add_target_with_env(localenv)
def restrict_observed_alleles(env, outdir, c):
    cmd = [
        'python3 restrict_observed_barcodes.py',
        '--seed',
        c['sampling_seed'],
        '--obs-file ${SOURCES[0]}',
        '--num-barcodes 1',
        '--out-obs-file ${TARGETS[0]}',
        '--log-file ${TARGETS[1]}',
        '--max-leaves',
        MAX_LEAVES,
    ]
    return env.Command(
        [
            join(outdir, 'fish_data_restrict.pkl'),
            join(outdir, 'log_restrict.txt'),
	],
        c['read_gestalt'],
        ' '.join(map(str, cmd)))

@nest.add_target_with_env(localenv)
def run_parsimony(env, outdir, c):
    cmd = [
        'python3 get_parsimony_topologies.py',
        '--obs-file ${SOURCES[0]}',
        '--out-template-file ${TARGETS[0]}',
        '--log-file ${TARGETS[1]}',
        '--num-jumbles',
	1,
        '--max-random',
        0,
        '--max-trees',
        1,
        '--max-random-multifurc',
        1,
    ]
    return env.Command(
        [
            join(outdir, 'parsimony_tree0.pkl'),
            join(outdir, 'log_parsimony.txt'),
        ],
        c['restrict_observed_alleles'],
        ' '.join(map(str, cmd)))

@nest.add_target_with_env(localenv)
def run_chronos(env, outdir, c):
    targets = [
            join(outdir, 'chronos_fitted.pkl'),
            join(outdir, 'chronos_fitted.txt')]
    cmd = [
        'python3 fit_chronos.py',
        '--seed 1',
        '--lambdas',
        '0.0001,0.001,0.01,0.1,1',
        '--obs-file ${SOURCES[0]}',
        '--topology-file ${SOURCES[1]}',
        '--out-model-file ${TARGETS[0]}',
        '--log-file ${TARGETS[1]}',
        '--num-init-random-rearrange 0',
        '--scratch-dir',
	join('analyze_gestalt', outdir, 'scratch'),
    ]
    c['chronos_res'].append(targets[0])
    return env.Command(
        targets,
        [
            c['restrict_observed_alleles'][0],
            c['run_parsimony'][0]],
        ' '.join(map(str, cmd)))

@nest.add_target_with_env(localenv)
def run_neighbor_joining(env, outdir, c):
    targets = [
            join(outdir, 'nj_fitted.pkl'),
            join(outdir, 'nj_fitted.txt')]
    cmd = [
        'python3 fit_neighbor_joining.py',
        '--seed 1',
        '--obs-file ${SOURCES[0]}',
        '--out-model-file ${TARGETS[0]}',
        '--log-file ${TARGETS[1]}',
        '--scratch-dir',
	join('analyze_gestalt', outdir, 'scratch'),
    ]
    c['nj_res'].append(targets[0])
    return env.Command(
        targets,
        [
            c['restrict_observed_alleles'][0]],
        ' '.join(map(str, cmd)))

nest.add(
    'sum_states',
    [20],
    label_func=lambda c: "sum_states_%d" % c,
)

nest.add(
    'extra_steps',
    [1],
    label_func=lambda c: "extra_steps_%d" % c,
)

@nest.add_target_with_env(localenv)
def run_MLE(env, outdir, c):
    targets = [
            join(outdir, 'gapml.pkl'),
            join(outdir, 'gapml.txt'),
    ]
    cmd_arg = [
        'python3 tune_topology.py',
        '--obs-file ${SOURCES[0]}',
        '--topology-file ${SOURCES[1]}',
        '--out-model-file ${TARGETS[0]}',
        '--log-file ${TARGETS[1]}',
        '--seed 400',
        '--branch-pen-params',
        FISH_DATA[c['data']]['branch_pen_params'],
        '--target-lam-pen-params',
        FISH_DATA[c['data']]['target_lam_pen_params'],
        '--num-penalty-tune-iters',
        1,
        '--num-penalty-tune-splits',
        4,
        '--max-fit-splits',
        4,
        '--num-chad-tune-iters',
        20,
        '--num-chad-stop',
        10,
        '--max-chad-tune-search',
        9,
        '--max-extra-steps',
        c['extra_steps'],
        '--max-sum-states',
        c['sum_states'],
        '--max-iters 5000',
        '--num-inits 1',
        '--tot-time-known',
        '--lambda-decay-fixed 0',
        '--num-processes 2',
        '--num-init-random-rearrange 5',
        '--scratch-dir',
	join('analyze_gestalt', outdir, 'scratch'),
    ]
    #cmd_arg_str = "'%s'" % ' '.join(map(str, cmd_arg))
    #cmd = [
    #    'python execute.py',
    #    '--clusters',
    #    localenv['clusters'],
    #    "${TARGETS[0]}",
    #    cmd_arg_str]
    cmd = cmd_arg
    c['MLE_res'].append(targets[0])
    return env.Command(
        targets, [
            c['restrict_observed_alleles'][0],
            c['run_parsimony'][0],
	],
        ' '.join(map(str, cmd)))

nest.pop('data')

@nest.add_target_with_env(localenv)
def plot_ADR_meta(env, outdir, c):
    targets = [
        join(outdir, 'plot_sym_heat_PMLE.png'),
        join(outdir, 'plot_sym_heat_chronos.png'),
        join(outdir, 'plot_sym_heat_nj.png'),
        join(outdir, 'plot_sym_heat_ADR1_PMLE.png'),
        join(outdir, 'plot_sym_heat_ADR1_chronos.png'),
        join(outdir, 'plot_sym_heat_ADR1_nj.png'),
        join(outdir, 'plot_sym_heat_ADR2_PMLE.png'),
        join(outdir, 'plot_sym_heat_ADR2_chronos.png'),
        join(outdir, 'plot_sym_heat_ADR2_nj.png'),
    ]
    sources = [
                c['obs_files'],
                c['MLE_res'],
                c['chronos_res'],
                c['nj_res'],
              ]
    PREFIX_LEN = len(outdir)

    def extract_template(path_list):
        adr_fish = [path for path in path_list if "ADR1" in path][0]
        return join(FOLDER_NAME, outdir, "%s", adr_fish.replace("_output/ADR1/", ""))

    obs_template = extract_template(c['obs_files'])
    mle_template = extract_template(c['MLE_res'])
    chronos_template = extract_template(c['chronos_res'])
    nj_template = extract_template(c['nj_res'])

    plot_templates = [
        join(FOLDER_NAME, outdir, "plot_sym_head_%s.png"),
        join(FOLDER_NAME, outdir, "plot_sym_head_%s_%s.png")]

    cmd = [
        'python plot_analyze_gestalt_meta.py',
        '--obs-file',
        obs_template,
        '--mle-template',
        mle_template,
        '--chronos-template',
        chronos_template,
        '--nj-template',
        nj_template,
        '--out-plot-template',
        plot_templates[0],
        '--out-fish-plot-template',
        plot_templates[1],
        '--num-rand-permute 2000',
        '--fishies ADR1,ADR2',
        '--methods PMLE,chronos,nj',
    ]
    return env.Command(targets, sources, ' '.join(map(str, cmd)))

@nest.add_target_with_env(localenv)
def plot_btw_ADR_fish_target_rates(env, outdir, c):
    fish_name = "ADR"
    fishies = ["ADR1", "ADR2"]
    targets = [
        join(outdir, 'target_lam_compare_%s.png' % fish_name),
    ]
    sources = [
                c['obs_files'],
                c['MLE_res'],
                c['chronos_res'],
                c['nj_res'],
              ]
    PREFIX_LEN = len(outdir)

    obs_template = extract_template(c['obs_files'], fishies, outdir)
    mle_template = extract_template(c['MLE_res'], fishies, outdir)

    plot_template = join(FOLDER_NAME, outdir, "target_lam_compare_%s.png")

    cmd = [
        'python plot_analyze_gestalt_btw_fish.py',
        '--obs-file',
        obs_template,
        '--mle-template',
        mle_template,
        '--out-plot-template',
        plot_template,
        '--num-rand 2000',
        '--fish-names',
        fish_name,
        '--fishies',
        ",".join(fishies),
    ]
    return env.Command(targets, sources, ' '.join(map(str, cmd)))

@nest.add_target_with_env(localenv)
def plot_btw_dome_fish_target_rates(env, outdir, c):
    fish_name = "4.3hpf"
    fishies = [key for key in FISH_DATA.keys() if "dome" in key]
    #fishies = ["dome1", "dome3", "dome8", "dome10"]
    targets = [
        join(outdir, 'target_lam_compare_%s.png' % fish_name),
    ]
    sources = [
                c['obs_files'],
                c['MLE_res'],
                c['chronos_res'],
                c['nj_res'],
              ]
    PREFIX_LEN = len(outdir)

    obs_template = extract_template(c['obs_files'], fishies, outdir)
    mle_template = extract_template(c['MLE_res'], fishies, outdir)

    plot_template = join(FOLDER_NAME, outdir, "target_lam_compare_%s.png")

    cmd = [
        'python plot_analyze_gestalt_btw_fish.py',
        '--obs-file',
        obs_template,
        '--mle-template',
        mle_template,
        '--out-plot-template',
        plot_template,
        '--num-rand 2000',
        '--fish-names',
        fish_name,
        '--fishies',
        ",".join(fishies),
    ]
    return env.Command(targets, sources, ' '.join(map(str, cmd)))

@nest.add_target_with_env(localenv)
def plot_btw_30hpf_fish_target_rates(env, outdir, c):
    fish_name = "30hpf"
    fishies = [key for key in FISH_DATA.keys() if "30hpf" in key]
    targets = [
        join(outdir, 'plot_target_lam_compare_%s.png'),
    ]
    sources = [
                c['obs_files'],
                c['MLE_res'],
                c['chronos_res'],
                c['nj_res'],
              ]
    PREFIX_LEN = len(outdir)

    obs_template = extract_template(c['obs_files'], fishies, outdir)
    mle_template = extract_template(c['MLE_res'], fishies, outdir)

    plot_template = join(FOLDER_NAME, outdir, "target_lam_compare_%s.png")

    cmd = [
        'python plot_analyze_gestalt_btw_fish.py',
        '--obs-file',
        obs_template,
        '--mle-template',
        mle_template,
        '--out-plot-template',
        plot_template,
        '--num-rand 2000',
        '--fish-names',
        fish_name,
        '--fishies',
        ",".join(fishies),
    ]
    return env.Command(targets, sources, ' '.join(map(str, cmd)))

@nest.add_target_with_env(localenv)
def plot_btw_epi90_fish_target_rates(env, outdir, c):
    # 90% epiboly/bud stage, 9 hpf
    fish_name = "9hpf"
    fishies = [key for key in FISH_DATA.keys() if "epi90" in key]
    targets = [
        join(outdir, 'target_lam_compare_%s.png' % fish_name),
    ]
    sources = [
                c['obs_files'],
                c['MLE_res'],
                c['chronos_res'],
                c['nj_res'],
              ]
    PREFIX_LEN = len(outdir)

    obs_template = extract_template(c['obs_files'], fishies, outdir)
    mle_template = extract_template(c['MLE_res'], fishies, outdir)

    plot_template = join(FOLDER_NAME, outdir, "target_lam_compare_%s.png")

    cmd = [
        'python plot_analyze_gestalt_btw_fish.py',
        '--obs-file',
        obs_template,
        '--mle-template',
        mle_template,
        '--out-plot-template',
        plot_template,
        '--num-rand 2000',
        '--fish-names',
        fish_name,
        '--fishies',
        ",".join(fishies),
    ]
    return env.Command(targets, sources, ' '.join(map(str, cmd)))

@nest.add_target_with_env(localenv)
def plot_btw_3day_fish_target_rates(env, outdir, c):
    fish_name = "72hpf"
    fishies = [key for key in FISH_DATA.keys() if "3day" in key]
    targets = [
        join(outdir, 'target_lam_compare_%s.png') % fish_name,
    ]
    sources = [
                c['obs_files'],
                c['MLE_res'],
                c['chronos_res'],
                c['nj_res'],
              ]
    PREFIX_LEN = len(outdir)

    obs_template = extract_template(c['obs_files'], fishies, outdir)
    mle_template = extract_template(c['MLE_res'], fishies, outdir)

    plot_template = join(FOLDER_NAME, outdir, "target_lam_compare_%s.png")

    cmd = [
        'python plot_analyze_gestalt_btw_fish.py',
        '--obs-file',
        obs_template,
        '--mle-template',
        mle_template,
        '--out-plot-template',
        plot_template,
        '--num-rand 2000',
        '--fish-names',
        fish_name,
        '--fishies',
        ",".join(fishies),
    ]
    return env.Command(targets, sources, ' '.join(map(str, cmd)))

@nest.add_target_with_env(localenv)
def plot_restriction_trends(env, outdir, c):
    targets = [
        join(outdir, 'plot_time_to_germ_layer_ADR1_PMLE.png'),
        join(outdir, 'plot_time_to_germ_layer_ADR1_chronos.png'),
        join(outdir, 'plot_time_to_germ_layer_ADR1_nj.png'),
        join(outdir, 'plot_time_to_germ_layer_ADR2_PMLE.png'),
        join(outdir, 'plot_time_to_germ_layer_ADR2_chronos.png'),
        join(outdir, 'plot_time_to_germ_layer_ADR2_nj.png'),
        join(outdir, 'plot_time_to_cell_type_ADR1_PMLE.png'),
        join(outdir, 'plot_time_to_cell_type_ADR1_chronos.png'),
        join(outdir, 'plot_time_to_cell_type_ADR1_nj.png'),
        join(outdir, 'plot_time_to_cell_type_ADR2_PMLE.png'),
        join(outdir, 'plot_time_to_cell_type_ADR2_chronos.png'),
        join(outdir, 'plot_time_to_cell_type_ADR2_nj.png'),
    ]
    sources = [
                c['obs_files'],
                c['MLE_res'],
                c['chronos_res'],
                c['nj_res'],
              ]
    PREFIX_LEN = len(outdir)

    def extract_template(path_list):
        adr_fish = [path for path in path_list if "ADR1" in path][0]
        return join(FOLDER_NAME, outdir, "%s", adr_fish.replace("_output/ADR1/", ""))

    obs_template = extract_template(c['obs_files'])
    mle_template = extract_template(c['MLE_res'])
    chronos_template = extract_template(c['chronos_res'])
    nj_template = extract_template(c['nj_res'])

    plot_templates = [
        join(FOLDER_NAME, outdir, "plot_time_to_germ_layer_%s_%s.png"),
        join(FOLDER_NAME, outdir, "plot_time_to_cell_type_%s_%s.png")]

    cmd = [
        'python plot_analyze_gestalt_cell_types.py',
        '--obs-file',
        obs_template,
        '--mle-template',
        mle_template,
        '--out-germ',
        plot_templates[0],
        '--out-cell',
        plot_templates[1],
        '--num-rand 2000',
        '--fishies ADR1,ADR2',
        '--methods PMLE,chronos,nj',
    ]
    return env.Command(targets, sources, ' '.join(map(str, cmd)))

@nest.add_target_with_env(localenv)
def print_fitted_params(env, outdir, c):
    targets = [
        join(outdir, 'fitted_params.tex'),
    ]
    sources = [
                c['obs_files'],
                c['MLE_res'],
              ]
    PREFIX_LEN = len(outdir)

    def extract_template(path_list):
        adr_fish = [path for path in path_list if "ADR1" in path][0]
        return join(FOLDER_NAME, outdir, "%s", adr_fish.replace("_output/ADR1/", ""))

    obs_template = extract_template(c['obs_files'])
    mle_template = extract_template(c['MLE_res'])

    cmd = [
        'python plot_analyze_gestalt_fitted_params.py',
        '--obs-file',
        obs_template,
        '--mle-template',
        mle_template,
        '--fishies',
        "ADR1,ADR2,dome1,30hpf_v6_3,3day1",
        '--out-table ${TARGETS[0]}',
    ]
    return env.Command(targets, sources, ' '.join(map(str, cmd)))

@nest.add_target_with_env(localenv)
def make_ADR1_d3_files(env, outdir, c):
    targets = [
        join(outdir, 'ADR1_PMLE_tree.json'),
    ]
    sources = [
                c['obs_files'],
                c['MLE_res'],
    ]
    PREFIX_LEN = len(outdir)

    def extract_template(path_list):
        adr_fish = [path for path in path_list if "ADR1" in path][0]
        return join(FOLDER_NAME, outdir, "%s", adr_fish.replace("_output/ADR1/", ""))

    obs_template = extract_template(c['obs_files'])
    mle_template = extract_template(c['MLE_res'])
    chronos_template = extract_template(c['chronos_res'])
    nj_template = extract_template(c['nj_res'])

    cmd = [
        'python plot_analyze_gestalt_d3.py',
        '--obs-file',
        obs_template,
        '--mle-template',
        mle_template,
        '--chronos-template',
        chronos_template,
        '--nj-template',
        nj_template,
        '--method PMLE',
        '--fish ADR1',
        '--out-json ${TARGETS[0]}',
    ]
    return env.Command(targets, sources, ' '.join(map(str, cmd)))

@nest.add_target_with_env(localenv)
def make_ADR2_d3_files(env, outdir, c):
    targets = [
        join(outdir, 'ADR2_PMLE_tree.json'),
    ]
    sources = [
                c['obs_files'],
                c['MLE_res'],
    ]
    PREFIX_LEN = len(outdir)

    def extract_template(path_list):
        adr_fish = [path for path in path_list if "ADR2" in path][0]
        return join(FOLDER_NAME, outdir, "%s", adr_fish.replace("_output/ADR2/", ""))

    obs_template = extract_template(c['obs_files'])
    mle_template = extract_template(c['MLE_res'])
    chronos_template = extract_template(c['chronos_res'])
    nj_template = extract_template(c['nj_res'])

    cmd = [
        'python plot_analyze_gestalt_d3.py',
        '--obs-file',
        obs_template,
        '--mle-template',
        mle_template,
        '--chronos-template',
        chronos_template,
        '--nj-template',
        nj_template,
        '--method PMLE',
        '--fish ADR2',
        '--out-json ${TARGETS[0]}',
    ]
    return env.Command(targets, sources, ' '.join(map(str, cmd)))
