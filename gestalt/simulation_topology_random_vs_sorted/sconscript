# Understand what toggles are important for topology recovery
# Ordering of lambdas!

import os
import random

from os.path import join
from nestly.scons import SConsWrap
from nestly import Nest
from SCons.Script import Environment, Command, AddOption
import numpy as np
import itertools

Import('env')
localenv = env.Clone()

# Set up state
base = {'nreps': localenv['NREPS'],
        'output_name': localenv['OUTPUT_NAME']}

nest = SConsWrap(Nest(base_dict=base), '_'+localenv['OUTPUT_NAME'], alias_environment=localenv)

HIGH_LAMS = [0.85, 0.7, 0.55]
LOW_LAM = 0.4
LAMBDA_SEQUENCES = [
    [HIGH_LAMS[0], HIGH_LAMS[1], HIGH_LAMS[2], LOW_LAM, LOW_LAM, LOW_LAM],
    [HIGH_LAMS[0], HIGH_LAMS[2], HIGH_LAMS[1], LOW_LAM, LOW_LAM, LOW_LAM],
    [HIGH_LAMS[1], HIGH_LAMS[0], HIGH_LAMS[2], LOW_LAM, LOW_LAM, LOW_LAM],
    [HIGH_LAMS[0], LOW_LAM, HIGH_LAMS[1], LOW_LAM, HIGH_LAMS[2], LOW_LAM],
    [HIGH_LAMS[0], LOW_LAM, HIGH_LAMS[2], LOW_LAM, HIGH_LAMS[1], LOW_LAM],
]
DOUBLE_CUT = 0.7

nest.add(
    'model_seed',
    [900],
    label_func=lambda c: 'model_seed%d' % c,
)

nest.add(
    'seq_idx',
    range(len(LAMBDA_SEQUENCES)),
    label_func=lambda c: 'seq_idx%d' % c,
)

nest.add(
    'data_seed',
    #range(10,15),
    range(15,18),
    label_func=lambda c: 'data_seed%d' % c,
)

@nest.add_target_with_env(localenv)
def generate(env, outdir, c):
    lambda_seq = LAMBDA_SEQUENCES[c['seq_idx']]
    targ_lambdas = ",".join(map(str, lambda_seq))

    cmd = [
        'python boto_run.py 2 2000 generate_data.py',
    	#'python generate_data.py',
    	'--sampling-rate 0.4',
        '--model-seed',
        c['model_seed'],
        '--data-seed',
        c['seq_idx'] + c['data_seed'] * 1000,
        '--out-obs-file ${TARGETS[0]}',
        '--out-model-file ${TARGETS[1]}',
        '--log-file ${TARGETS[2]}',
        '--time 1',
        '--start-birth-lambda 100',
        '--birth-lambda 2.3',
        '--num-barcodes',
        8,
        '--min-uniq-alleles 50',
        '--max-uniq-alleles 70',
        '--max-abundance 100',
        '--double-cut-weight',
        DOUBLE_CUT,
        '--target-lambdas',
        targ_lambdas,
        '--trim-zero-probs 0.1 0.1',
        '--trim-poissons 4 4',
        '--trim-long-factor 0.02 0.02',
        '--insert-zero-prob 0.1',
        '--insert-poisson 1',
        '--perturb-target-lambdas-variance 0',
        '--max-tries 20'
    ]
    cmd = []
    return env.Command(
        [
            join(outdir, 'obs_data.pkl'),
            join(outdir, 'true_model.pkl'),
            join(outdir, 'log.txt')],
        [],
        ' '.join(map(str, cmd)))

nest.add(
    'num_barcodes',
    [1],
    label_func=lambda c: "num_barcodes%d" % c,
)

@nest.add_target_with_env(localenv)
def restrict_observed_alleles(env, outdir, c):
    cmd = [
        'python boto_run.py 2 2000 restrict_observed_barcodes.py',
        #'python restrict_observed_barcodes.py',
        '--obs-file ${SOURCES[0]}',
        '--model-file ${SOURCES[1]}',
        '--num-barcodes',
        c['num_barcodes'],
        '--out-obs-file ${TARGETS[0]}',
        '--log-file ${TARGETS[1]}',
    ]
    cmd = []
    return env.Command(
        [
            join(outdir, 'obs_data.pkl'),
            join(outdir, 'log_restrict.txt')],
        c['generate'],
        ' '.join(map(str, cmd)))

@nest.add_target_with_env(localenv)
def run_topology(env, outdir, c):
    cmd = [
        'python boto_run.py 2 6000 get_parsimony_topologies.py',
        #'python get_parsimony_topologies.py',
        '--obs-file ${SOURCES[0]}',
        '--out-template-file ${TARGETS[0]}',
        '--log-file ${TARGETS[1]}',
        '--max-random',
        0,
        '--max-random-multifurc',
        4,
        '--num-jumbles 1'
    ]
    cmd = []
    return env.Command(
        [
            join(outdir, 'parsimony_tree0.pkl'),
            join(outdir, 'log_parsimony.txt')],
        [
            c['restrict_observed_alleles'][0]],
        ' '.join(map(str, cmd)))

nest.add(
    'lambda_known',
    [False],
    label_func=lambda c: 'lambda_known%d' % int(c))

nest.add(
    'tot_time_known',
    [True],
    label_func=lambda c: 'tot_time_known%d' % int(c))

@nest.add_target_with_env(localenv)
def run_MLE(env, outdir, c):
    if c['num_barcodes'] == 1:
        penalty_params = "192,48,12,3"
    else:
    	penalty_params = "12,6,3,1.5,.75"

    cmd = [
        'python boto_run.py 18 25000 tune_topology.py',
	#'python tune_topology.py',
        '--obs-file ${SOURCES[0]}',
        '--topology-file ${SOURCES[1]}',
        '--true-model-file ${SOURCES[2]}',
        '--out-model-file ${TARGETS[0]}',
        '--log-file ${TARGETS[1]}',
        '--seed',
	c['seq_idx'] + c['data_seed'] * 1000,
        '--log-barr 0.0000001',
        '--dist-to-half-pens',
	penalty_params,
        '--max-sum-states 2000',
        '--max-extra-steps 2',
        '--max-iters 10000',
        '--total-tune-splits 3',
        '--num-inits 1',
        '--lambda-known' if c['lambda_known'] else '',
        '--tot-time-known',
        '--max-topologies 4',
    ]
    cmd = []
    return env.Command(
        [
            join(outdir, 'tune_fitted_score.pkl'),
            join(outdir, 'tune_fitted_log.txt')],
        [
            c['restrict_observed_alleles'][0],
            c['run_topology'][0],
            c['generate'][1]],
        ' '.join(map(str, cmd)))

