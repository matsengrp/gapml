# Test if we have any sort of consistency
# This simulates a larger tree and performs a topology search

import os

from os.path import join
from nestly.scons import SConsWrap
from nestly import Nest
from SCons.Script import Environment, Command, AddOption
import numpy as np

Import('env')
localenv = env.Clone()

# Set up state
base = {'nreps': localenv['NREPS'],
        'output_name': localenv['OUTPUT_NAME']}

nest = SConsWrap(Nest(base_dict=base), '_'+localenv['OUTPUT_NAME'], alias_environment=localenv)

USE_AWS = True
NUM_RANDOM_REARRANGE = 20
GROWTH_DICT = {
    "small": {
        "sampling_rate": 0.08,
        "birth_sync_rounds": 5,
        "birth_sync_time": 0.02,
        "death_lambda": 0.2,
        "birth_decay": -16,
        "birth_min": 6,
        "lambda_sequence": [.95, 0.9, 0.85, .8, .75, .7, .6],
        "target_decay": .4,
        "double": 0.06,
        "min_leaves": 80,
        "max_leaves": 120,
    },
    "mini": {
        "sampling_rate": 0.1,
        "birth_sync_rounds": 5,
        "birth_sync_time": 0.07,
        "death_lambda": 0.2,
        "birth_decay": -1,
        "birth_min": 2,
        "lambda_sequence": [1.2, 0.9, .8, .75, .7, .65],
        "target_decay": .6,
        "double": 0.03,
        "min_leaves": 20,
        "max_leaves": 100,
    },
}

nest.add(
    'model_seed',
    [100],
    label_func=lambda c: 'model_seed%d' % c,
)

nest.add(
    'seed',
    [400],
)

nest.add(
    'growth_stage',
    [
       'small'
    ])

@nest.add_target_with_env(localenv)
def generate(env, outdir, c):
    targ_lambdas = ",".join(map(str, GROWTH_DICT[c['growth_stage']]['lambda_sequence']))

    cmd_template = [
        '--sampling-rate',
        GROWTH_DICT[c['growth_stage']]['sampling_rate'],
        '--model-seed',
        c['model_seed'],
        '--data-seed',
        c['seed'],
        '--time 1',
        '--birth-sync-rounds',
        GROWTH_DICT[c['growth_stage']]['birth_sync_rounds'],
        '--birth-sync-time',
        GROWTH_DICT[c['growth_stage']]['birth_sync_time'],
        '--birth-decay',
        GROWTH_DICT[c['growth_stage']]['birth_decay'],
        '--birth-min',
        GROWTH_DICT[c['growth_stage']]['birth_min'],
        '--death-lambda',
        GROWTH_DICT[c['growth_stage']]['death_lambda'],
        '--max-clt-leaves',
        int(GROWTH_DICT[c['growth_stage']]['max_leaves']/GROWTH_DICT[c['growth_stage']]['sampling_rate'] * 1.1),
        '--num-barcodes',
        4,
        '--min-uniq-alleles',
        GROWTH_DICT[c['growth_stage']]['min_leaves'],
        '--max-uniq-alleles',
        GROWTH_DICT[c['growth_stage']]['max_leaves'],
        '--max-abundance 20000',
        '--double-cut-weight',
        GROWTH_DICT[c['growth_stage']]['double'],
        '--target-lambdas',
        targ_lambdas,
        '--target-lam-decay',
        GROWTH_DICT[c['growth_stage']]['target_decay'],
        '--trim-zero-probs 0.1 0.1',
        '--trim-poissons 4 4',
        '--trim-long-factor 0.02 0.02',
        '--insert-zero-prob 0.1',
        '--insert-poisson 1',
        '--perturb-target-lambdas-variance 0',
        '--max-tries 20',
    ]

    targets = [
        join(outdir, 'obs_data.pkl'),
        join(outdir, 'true_model.pkl'),
        join(outdir, 'log.txt')]
    if not USE_AWS:
        cmd = [
            'python generate_data.py',
            '--out-obs-file ${TARGETS[0]}',
            '--out-model-file ${TARGETS[1]}',
            '--log-file ${TARGETS[2]}',
        ] + cmd_template
        return env.Command(
            targets,
            [],
            ' '.join(map(str, cmd)))
    else:
        cmd_arg = [
            'generate_data.py',
            '--out-obs-file',
            join('simulation_topol_consist', targets[0]),
            '--out-model-file',
            join('simulation_topol_consist', targets[1]),
            '--log-file',
            join('simulation_topol_consist', targets[2]),
        ] + cmd_template
        cmd_str_arg = ' '.join(map(str, cmd_arg))
        cmd = [
            'python boto_run.py',
            '--out-job-id ${TARGETS[-1]}',
            '--cmd',
            '"%s"' % cmd_str_arg]
        return env.Command(
            targets + [join(outdir, 'job_id_generate.txt')],
            [],
            ' '.join(map(str, cmd)))

nest.add(
    'num_barcodes',
    [1],
    label_func=lambda c: "num_barcodes%d" % c,
)

@nest.add_target_with_env(localenv)
def restrict_observed_alleles(env, outdir, c):
    cmd_template = [
        '--num-barcodes',
        c['num_barcodes'],
    ]
    sources = c['generate']
    sources = [str(s) for s in sources]
    targets = [
	join(outdir, 'obs_data.pkl'),
	join(outdir, 'log_restrict.txt')]
    if not USE_AWS:
        cmd = [
            'python restrict_observed_barcodes.py',
            '--obs-file ${SOURCES[0]}',
            '--out-obs-file ${TARGETS[0]}',
            '--log-file ${TARGETS[1]}',
        ] + cmd_template
        return env.Command(
            targets,
            sources,
            ' '.join(map(str, cmd)))
    else:
        cmd_arg = [
            'restrict_observed_barcodes.py',
            '--obs-file',
	    join('simulation_topol_consist', sources[0]),
            '--out-obs-file',
            join('simulation_topol_consist', targets[0]),
            '--log-file',
            join('simulation_topol_consist', targets[1]),
        ] + cmd_template
        cmd_str_arg = ' '.join(map(str, cmd_arg))
        cmd = [
            'python boto_run.py',
            '--out-job-id ${TARGETS[-1]}',
            '--in-job-dependency ${SOURCES[-1]}',
            '--cmd',
            '"%s"' % cmd_str_arg]
        return env.Command(
            targets + [join(outdir, 'job_id_restrict.txt')],
            sources,
            ' '.join(map(str, cmd)))

@nest.add_target_with_env(localenv)
def run_topology(env, outdir, c):
    targets = [
            join(outdir, 'parsimony_tree0.pkl'),
            join(outdir, 'log_parsimony.txt')]
    sources = c['restrict_observed_alleles']
    sources = [str(s) for s in sources]
    cmd_template = [
        '--max-random',
        0,
        '--max-random-multifurc',
        1,
        '--num-jumbles 1',
        '--max-trees 1',
    ]
    if not USE_AWS:
        cmd = [
            'python get_parsimony_topologies.py',
            '--obs-file ${sources[0]}',
            '--out-template-file ${targets[0]}',
            '--log-file ${targets[1]}',
        ] + cmd_template
        return env.Command(
            targets,
            sources,
            ' '.join(map(str, cmd)))
    else:
        cmd_arg = [
            'get_parsimony_topologies.py',
            '--obs-file',
            join('simulation_topol_consist', sources[0]),
            '--out-template-file',
            join('simulation_topol_consist', targets[0]),
            '--log-file',
            join('simulation_topol_consist', targets[1]),
        ] + cmd_template
        cmd_str_arg = ' '.join(map(str, cmd_arg))
        cmd = [
            'python boto_run.py',
            '--out-job-id ${TARGETS[-1]}',
            '--in-job-dependency ${SOURCES[-1]}',
            '--cmd',
            '"%s"' % cmd_str_arg]
        return env.Command(
            targets + [join(outdir, 'job_id_parsimony.txt')],
            sources,
            ' '.join(map(str, cmd)))

@nest.add_target_with_env(localenv)
def run_chronos(env, outdir, c):
    cmd_template = [
        '--seed',
        c['seed'] + 20,
        '--num-init-random-rearrange',
        NUM_RANDOM_REARRANGE if c['num_barcodes'] == 1 else 0,
        '--scratch-dir',
	join('simulation_topol_consist', outdir, 'scratch'),
    ]
    targets = [
            join(outdir, 'chronos_fitted.pkl'),
            join(outdir, 'chronos_fitted.txt')]
    sources = [
            c['restrict_observed_alleles'][0],
            c['generate'][1]] + c['run_topology']
    sources = [str(s) for s in sources]
    if not USE_AWS:
        cmd = [
            'python fit_chronos.py',
            '--obs-file ${SOURCES[0]}',
            '--true-model-file ${SOURCES[1]}',
            '--topology-file ${SOURCES[2]}',
            '--out-model-file ${TARGETS[0]}',
            '--log-file ${TARGETS[1]}',
        ]
        return env.Command(targets, sources, ' '.join(map(str, cmd)))
    else:
        cmd_arg = [
            'fit_chronos.py',
            '--obs-file',
            join('simulation_topol_consist', sources[0]),
            '--true-model-file',
            join('simulation_topol_consist', sources[1]),
            '--topology-file',
            join('simulation_topol_consist', sources[2]),
            '--out-model-file',
            join('simulation_topol_consist', targets[0]),
            '--log-file',
            join('simulation_topol_consist', targets[1]),
        ] + cmd_template
        cmd_str_arg = ' '.join(map(str, cmd_arg))
        cmd = [
            'python boto_run.py',
            '--out-job-id ${TARGETS[-1]}',
            '--in-job-dependency ${SOURCES[-1]}',
            '--cmd',
            '"%s"' % cmd_str_arg]
        return env.Command(
            targets + [join(outdir, 'job_id_chronos.txt')],
            sources,
            ' '.join(map(str, cmd)))

nest.add(
    'sum_states',
    [10], # not really different from using 30
    label_func=lambda c: "sum_states_%d" % c,
)

nest.add(
    'extra_steps',
    [1],
    label_func=lambda c: "extra_steps_%d" % c,
)

@nest.add_target_with_env(localenv)
def run_MLE(env, outdir, c):
    penalty_params = "512,128,32,8"
    target_lam_penalty_params = "1"
    if c['num_barcodes'] == 1:
        penalty_params = "2048,512,128,32"
        target_lam_penalty_params = "10"
    elif c['num_barcodes'] == 2:
        target_lam_penalty_params = "1"
    elif c['num_barcodes'] == 4:
        target_lam_penalty_params = "1"

    cmd_template = [
        '--seed',
        c['seed'] + 30,
        '--branch-pen-params',
        penalty_params,
        '--target-lam-pen-params',
        target_lam_penalty_params,
        '--num-penalty-tune-iters',
        1,
        '--num-penalty-tune-splits',
        4 if c['num_barcodes'] == 1 else 2,
        '--max-fit-splits',
        4 if c['num_barcodes'] == 1 else 4,
        '--num-chad-tune-iters',
        15,
        '--num-chad-stop',
        5,
        '--max-chad-tune-search',
        15 if c['num_barcodes'] == 1 else 0,
        '--max-sum-states',
        c['sum_states'],
        '--max-extra-steps',
        c['extra_steps'],
        '--max-iters 50000',
        '--num-inits 1',
        '--tot-time-known',
        '--num-processes',
        6 if c['num_barcodes'] == 1 else 3,
        '--num-init-random-rearrange',
        NUM_RANDOM_REARRANGE if c['num_barcodes'] == 1 else 0,
        '--count-chads' if c['num_barcodes'] == 1 else '',
        '--scratch-dir',
        #'_output/scratch',
	join('simulation_topol_consist', outdir, 'scratch'),
    ]
    targets = [
                join(outdir, 'tune_fitted.pkl'),
                join(outdir, 'tune_fitted.txt')]
    sources = [
                c['restrict_observed_alleles'][0],
                c['run_topology'][0],
                c['generate'][1]] + c['run_chronos']
    sources = [str(s) for s in sources]
    if not USE_AWS:
        cmd = [
            'python tune_topology.py',
            '--obs-file ${SOURCES[0]}',
            '--topology-file ${SOURCES[1]}',
            '--true-model-file ${SOURCES[2]}',
            '--out-model-file ${TARGETS[0]}',
            '--log-file ${TARGETS[1]}'] + cmd_template
        return env.Command(targets, sources, ' '.join(map(str, cmd)))
    else:
        cmd_arg = [
            'tune_topology.py',
            '--obs-file',
            join('simulation_topol_consist', sources[0]),
            '--topology-file',
            join('simulation_topol_consist', sources[1]),
            '--true-model-file',
            join('simulation_topol_consist', sources[2]),
            '--out-model-file',
            join('simulation_topol_consist', targets[0]),
            '--log-file',
            join('simulation_topol_consist', targets[1]),
        ] + cmd_template
        cmd_str_arg = ' '.join(map(str, cmd_arg))
        cmd = [
            'python boto_run.py',
            '--vcpus 36',
            '--memory 55000',
            '--out-job-id ${TARGETS[-1]}',
            '--in-job-dependency ${SOURCES[-1]}',
            '--cmd',
            '"%s"' % cmd_str_arg]
        return env.Command(
            targets + [join(outdir, 'job_id_mle.txt')],
            sources,
            ' '.join(map(str, cmd)))
