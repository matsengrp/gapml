# Test if we have any sort of consistency
# This simulates a larger tree and performs a topology search

import os

from os.path import join
from nestly.scons import SConsWrap
from nestly import Nest
from SCons.Script import Environment, Command, AddOption
import numpy as np

Import('env')
localenv = env.Clone()

# Set up state
base = {'nreps': localenv['NREPS'],
        'output_name': localenv['OUTPUT_NAME']}

nest = SConsWrap(Nest(base_dict=base), '_'+localenv['OUTPUT_NAME'], alias_environment=localenv)

LAMBDA_SEQUENCE = [1., 0.9, 0.8, 0.7, 0.6]

nest.add(
    'model_seed',
    [510],
    label_func=lambda c: 'model_seed%d' % c,
)

nest.add(
    'seed',
    range(500, 501),
)

nest.add(
    'lambda_type',
    [
       'lambda_diff'
    ])

@nest.add_target_with_env(localenv)
def generate(env, outdir, c):
    targ_lambdas = ",".join(map(str, LAMBDA_SEQUENCE))

    cmd = [
        #'python boto_run.py 2 2000 generate_data.py',
	'python generate_data.py',
	'--sampling-rate 0.2',
        '--model-seed',
        c['model_seed'],
        '--data-seed',
        c['seed'],
        '--out-obs-file ${TARGETS[0]}',
        '--out-model-file ${TARGETS[1]}',
        '--log-file ${TARGETS[2]}',
        '--time 1',
        '--start-birth-lambda 95',
        '--birth-lambda 2.8',
        '--death-lambda 0.2',
        '--num-barcodes',
        27,
        '--min-uniq-alleles 15',
        '--max-uniq-alleles 30',
        '--max-abundance 200',
        '--double-cut-weight 0.2',
        '--target-lambdas',
        targ_lambdas,
        '--trim-zero-probs 0.1 0.1',
        '--trim-poissons 4 4',
        '--trim-long-factor 0.02 0.02',
        '--insert-zero-prob 0.1',
        '--insert-poisson 1',
        '--perturb-target-lambdas-variance 0',
        '--max-tries 20',
    ]
    return env.Command(
        [
            join(outdir, 'obs_data.pkl'),
            join(outdir, 'true_model.pkl'),
            join(outdir, 'log.txt')],
        [],
        ' '.join(map(str, cmd)))

nest.add(
    'num_barcodes',
    [1,3,9],
    label_func=lambda c: "num_barcodes%d" % c,
)

@nest.add_target_with_env(localenv)
def restrict_observed_alleles(env, outdir, c):
    cmd = [
        #'python boto_run.py 2 2000 restrict_observed_barcodes.py',
        'python restrict_observed_barcodes.py',
        '--obs-file ${SOURCES[0]}',
        '--model-file ${SOURCES[1]}',
        '--num-barcodes',
        c['num_barcodes'],
        '--out-obs-file ${TARGETS[0]}',
        '--log-file ${TARGETS[1]}',
    ]
    return env.Command(
        [
            join(outdir, 'obs_data.pkl'),
            join(outdir, 'log_restrict.txt')],
        c['generate'],
        ' '.join(map(str, cmd)))

@nest.add_target_with_env(localenv)
def run_topology(env, outdir, c):
    cmd = [
        #'python boto_run.py 2 6000 get_parsimony_topologies.py',
        'python get_parsimony_topologies.py',
        '--obs-file ${SOURCES[0]}',
        '--out-template-file ${TARGETS[0]}',
        '--log-file ${TARGETS[1]}',
        '--max-random',
        0,
        '--max-random-multifurc',
        4,
        '--num-jumbles 1'
    ]
    return env.Command(
        [
            join(outdir, 'parsimony_tree0.pkl'),
            join(outdir, 'log_parsimony.txt')],
        [
            c['restrict_observed_alleles'][0]],
        ' '.join(map(str, cmd)))

@nest.add_target_with_env(localenv)
def run_MLE(env, outdir, c):
    if c['num_barcodes'] == 1:
        penalty_params = "3072,768,192,48,12"
    elif c['num_barcodes'] == 3:
        penalty_params = "768,192,48,12,3"
    elif c['num_barcodes'] == 9:
        penalty_params = "768,192,48,12,3"
    elif c['num_barcodes'] == 27:
        penalty_params = "192,48,12,3,.75"
    penalty_params = "12"
    cmd = [
	'python tune_topology.py',
        '--obs-file ${SOURCES[0]}',
        '--topology-file ${SOURCES[1]}',
        '--true-model-file ${SOURCES[2]}',
        '--out-model-file ${TARGETS[0]}',
        '--log-file ${TARGETS[1]}',
        '--seed',
	c['seed'] + 100,
        '--log-barr 0.0001',
        '--dist-to-half-pens',
	penalty_params,
        '--max-sum-states 2000',
        '--max-extra-steps 2',
        '--max-iters 10000',
        '--num-inits 1',
        '--tot-time-known',
        '--total-tune-splits 3',
        '--max-topologies 1',
    ]
    return env.Command(
        [
            join(outdir, 'tune_example.pkl'),
            join(outdir, 'tune_example.txt')],
        [
            c['restrict_observed_alleles'][0],
            c['run_topology'][0],
            c['generate'][1]],
        ' '.join(map(str, cmd)))
