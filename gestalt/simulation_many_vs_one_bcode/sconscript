# Compare two bcode designs:
# 1. many targets in a single bcode
# 2. small num targets in multiple IID bcodes

import os

from os.path import join
from nestly.scons import SConsWrap
from nestly import Nest
from SCons.Script import Environment, Command, AddOption
import numpy as np

Import('env')
localenv = env.Clone()

nest = SConsWrap(Nest(), localenv['output'], alias_environment=localenv)

GROWTH_DICT = {
    "sampling_rate": 0.08,
    "birth_sync_rounds": 5,
    "birth_sync_time": 0.06,
    "death_lambda": 0.3,
    "birth_decay": -18,
    "birth_min": 6,
    "lambda_sequence": [.75, .7, .65, .6, .55, .5, .45],
    "target_decay": 0,
    "double": 0.05,
    "min_leaves": 70,
    "max_leaves": 110,
}

nest.add(
    'num_bcodes',
    [3],
    label_func=lambda c: 'num_bcodes%d' % c,
)

nest.add(
    'model_seed',
    range(1),
    label_func=lambda c: 'model_seed%d' % c,
)

@nest.add_target_with_env(localenv)
def generate_one_big_bcode(env, outdir, c):
    targ_lambdas = ",".join(map(str, GROWTH_DICT['lambda_sequence'] * c['num_bcodes']))

    targets = [
        join(outdir, 'obs_data_one.pkl'),
        join(outdir, 'true_model_one.pkl'),
        join(outdir, 'log_one.txt')]
    cmd = [
        'python generate_data.py',
        '--out-obs-file ${TARGETS[0]}',
        '--out-model-file ${TARGETS[1]}',
        '--log-file ${TARGETS[2]}',
        '--sampling-rate',
        GROWTH_DICT['sampling_rate'],
        '--model-seed',
        c['model_seed'],
        '--data-seed',
        c['model_seed'],
        '--time 1',
        '--birth-sync-rounds',
        GROWTH_DICT['birth_sync_rounds'],
        '--birth-sync-time',
        GROWTH_DICT['birth_sync_time'],
        '--birth-decay',
        GROWTH_DICT['birth_decay'],
        '--birth-min',
        GROWTH_DICT['birth_min'],
        '--death-lambda',
        GROWTH_DICT['death_lambda'],
        '--max-clt-leaves',
        int(GROWTH_DICT['max_leaves']/GROWTH_DICT['sampling_rate'] * 1.1),
        '--num-barcodes 1',
        '--min-uniq-alleles',
        GROWTH_DICT['min_leaves'],
        '--max-uniq-alleles',
        GROWTH_DICT['max_leaves'],
        '--max-abundance 20000',
        '--double-cut-weight',
        GROWTH_DICT['double'],
        '--target-lambdas',
        targ_lambdas,
        '--target-lam-decay',
        GROWTH_DICT['target_decay'],
        '--trim-zero-probs 0.15 0.1 0.15 0.1',
        '--trim-params 1.35 -0.1 1.2 0.1',
        '--trim-long-factor 0.08 0.08',
        '--insert-zero-prob 0.5',
        '--insert-params 1 0.3',
        '--perturb-target-lambdas-variance 0',
        '--max-tries 20',
    ]
    return env.Command(
        targets,
        [],
        ' '.join(map(str, cmd)))

@nest.add_target_with_env(localenv)
def generate_many_bcodes(env, outdir, c):
    targ_lambdas = ",".join(map(str, GROWTH_DICT['lambda_sequence']))

    targets = [
        join(outdir, 'obs_data_many.pkl'),
        join(outdir, 'true_model_many.pkl'),
        join(outdir, 'log_many.txt')]
    cmd = [
        'python generate_data.py',
        '--out-obs-file ${TARGETS[0]}',
        '--out-model-file ${TARGETS[1]}',
        '--log-file ${TARGETS[2]}',
        '--sampling-rate',
        GROWTH_DICT['sampling_rate'],
        '--model-seed',
        c['model_seed'],
        '--data-seed',
        c['model_seed'],
        '--time 1',
        '--birth-sync-rounds',
        GROWTH_DICT['birth_sync_rounds'],
        '--birth-sync-time',
        GROWTH_DICT['birth_sync_time'],
        '--birth-decay',
        GROWTH_DICT['birth_decay'],
        '--birth-min',
        GROWTH_DICT['birth_min'],
        '--death-lambda',
        GROWTH_DICT['death_lambda'],
        '--max-clt-leaves',
        int(GROWTH_DICT['max_leaves']/GROWTH_DICT['sampling_rate'] * 1.1),
        '--num-barcodes',
	c['num_bcodes'],
        '--min-uniq-alleles',
        GROWTH_DICT['min_leaves'],
        '--max-uniq-alleles',
        GROWTH_DICT['max_leaves'],
        '--max-abundance 20000',
        '--double-cut-weight',
        GROWTH_DICT['double'],
        '--target-lambdas',
        targ_lambdas,
        '--target-lam-decay',
        GROWTH_DICT['target_decay'],
        '--trim-zero-probs 0.15 0.1 0.15 0.1',
        '--trim-params 1.35 -0.1 1.2 0.1',
        '--trim-long-factor 0.08 0.08',
        '--insert-zero-prob 0.5',
        '--insert-params 1 0.3',
        '--perturb-target-lambdas-variance 0',
        '--max-tries 20',
    ]
    return env.Command(
        targets,
        [],
        ' '.join(map(str, cmd)))
