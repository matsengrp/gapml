# Try to replicate the summary statistics seem in real data using our own simulation engine

import os

from os.path import join
from nestly.scons import SConsWrap
from nestly import Nest
from SCons.Script import Environment, Command, AddOption
import numpy as np

Import('env')
localenv = env.Clone()

# Set up state
nest = SConsWrap(Nest(), localenv['output'], alias_environment=localenv)

NUM_RANDOM_REARRANGE = 10
SEEDS = range(10)
GROWTH_DICT = {
    "dome": {
        "sampling_rate": 0.1,
        "birth_sync_rounds": 9,
        "birth_sync_time": 0.078,
        "death_lambda": 0.1,
        "birth_decay": -1,
        "birth_min": 0.1,
        "lambda_sequence": [1.7, 0.55, 0.2, 0.55, 0.45, 0.6, 1.4, 0.25, 1.25, 0.2],
        "target_decay": 0.01,
        "double": 0.04,
        "min_leaves": 900,
        "max_leaves": 2500,
    },
}

nest.add(
    'model_seed',
    [0],
    label_func=lambda c: 'model_seed%d' % c,
)
nest.add_aggregate('obs_list', list)

nest.add(
    'seed',
    SEEDS,
)

nest.add(
    'growth_stage',
    [
       'dome',
    ])

@nest.add_target_with_env(localenv)
def generate(env, outdir, c):
    targ_lambdas = ",".join(map(str,
        GROWTH_DICT[c['growth_stage']]['lambda_sequence']))

    cmd = [
        'python generate_data.py',
        '--sampling-rate',
        GROWTH_DICT[c['growth_stage']]['sampling_rate'],
        '--model-seed',
        c['model_seed'],
        '--data-seed',
        c['seed'],
        '--out-obs-file ${TARGETS[0]}',
        '--out-model-file ${TARGETS[1]}',
        '--log-file ${TARGETS[2]}',
        '--time 1',
        '--birth-sync-rounds',
        GROWTH_DICT[c['growth_stage']]['birth_sync_rounds'],
        '--birth-sync-time',
        GROWTH_DICT[c['growth_stage']]['birth_sync_time'],
        '--birth-decay',
        GROWTH_DICT[c['growth_stage']]['birth_decay'],
        '--birth-min',
        GROWTH_DICT[c['growth_stage']]['birth_min'],
        '--death-lambda',
        GROWTH_DICT[c['growth_stage']]['death_lambda'],
        '--max-clt-leaves',
        int(GROWTH_DICT[c['growth_stage']]['max_leaves']/GROWTH_DICT[c['growth_stage']]['sampling_rate'] * 1.1),
        '--num-barcodes',
        1,
        '--min-uniq-alleles',
        GROWTH_DICT[c['growth_stage']]['min_leaves'],
        '--max-uniq-alleles',
        GROWTH_DICT[c['growth_stage']]['max_leaves'],
        '--max-abundance 20000',
        '--double-cut-weight',
        GROWTH_DICT[c['growth_stage']]['double'],
        '--target-lambdas',
        targ_lambdas,
        '--target-lam-decay',
        GROWTH_DICT[c['growth_stage']]['target_decay'],
        '--trim-zero-probs 0.0814752   0.09483087  0.51985543  0.30612402',
        '--trim-short-params 0.4   1  -2 10',
        '--trim-long-params 2.08453578  1.27399409',
        '--trim-long-factor 0.0583183   0.09442545',
        '--insert-zero-prob 0.6',
        '--insert-params -0.37634279  1.65025805',
        '--perturb-target-lambdas-variance 0',
        '--max-tries 20',
    ]
    return env.Command(
        [
            join(outdir, 'obs_data.pkl'),
            join(outdir, 'true_model.pkl'),
            join(outdir, 'log.txt')],
        [],
        ' '.join(map(str, cmd)))

nest.add(
    'num_barcodes',
    [1],
    label_func=lambda c: "num_barcodes%d" % c,
)

@nest.add_target_with_env(localenv)
def restrict_observed_alleles(env, outdir, c):
    cmd = [
        'python restrict_observed_barcodes.py',
        '--obs-file ${SOURCES[0]}',
        '--num-barcodes',
        c['num_barcodes'],
        '--out-obs-file ${TARGETS[0]}',
        '--log-file ${TARGETS[1]}',
    ]
    targets = [
            join(outdir, 'obs_data.pkl'),
            join(outdir, 'log_restrict.txt')]
    c['obs_list'].append(targets[0])
    return env.Command(
        targets,
        c['generate'],
        ' '.join(map(str, cmd)))

nest.pop('seed')

@nest.add_target_with_env(localenv)
def plot(env, outdir, c):
    template = os.path.join("simulation_replicate_real_data", c['obs_list'][0].replace("/%d/" % SEEDS[0], "/%d/"))
    cmd = [
        'python plot_simulation_replicate_real_data.py',
        '--real-data analyze_gestalt/_output/dome1/sampling_seed0/fish_data_restrict.pkl',
        '--out-plot-abun ${TARGETS[0]}',
        '--out-plot-target ${TARGETS[1]}',
        '--out-plot-bcode ${TARGETS[2]}',
        '--obs-file-template',
        template,
        '--data-seeds',
        ','.join(map(str, SEEDS)),
    ]
    return env.Command(
        [
            join(outdir, 'simulation_abundance.png'),
            join(outdir, 'simulation_target_deact.png'),
            join(outdir, 'simulation_bcode_exhaust.png'),
        ],
        c['obs_list'],
        ' '.join(map(str, cmd)))
