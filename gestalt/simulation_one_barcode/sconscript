# Test how well we can estimate the tree with only one barcode
# Using parameters we fit on real data

import os

from os.path import join
from nestly.scons import SConsWrap
from nestly import Nest
from SCons.Script import Environment, Command, AddOption
import numpy as np

Import('env')
localenv = env.Clone()

# Set up state
base = {'nreps': localenv['NREPS'],
        'output_name': localenv['OUTPUT_NAME']}

nest = SConsWrap(Nest(base_dict=base), '_'+localenv['OUTPUT_NAME'], alias_environment=localenv)

nest.add(
    'seed',
    range(1),
    label_func=lambda c: "seed%d" % c,
)

@nest.add_target_with_env(localenv)
def generate(env, outdir, c):
    # These parameters are taken from parameters fit on GESTALT data
    targ_lams = [
	0.67076792,
	0.15538075,
	0.00287668,
	0.38409894,
	0.08062923,
	0.14737477,
	0.3349348,
	0.00490911,
	0.84342738,
	0.03428745]

    cmd = [
        'python generate_data.py',
        '--model-seed',
        c['seed'],
        '--data-seed',
        c['seed'],
        '--out-obs-file ${TARGETS[0]}',
        '--out-model-file ${TARGETS[1]}',
        '--log-file ${TARGETS[2]}',
        '--time 2.9',
        '--target-lambdas',
        ",".join(map(lambda x: str(x), targ_lams)),
	'--trim-long-probs',
        "0.04 0.09",
        '--trim-zero-probs',
        "0.4 0.05",
        '--trim-poissons',
        "5 5",
        '--insert-zero-prob',
        "0.9",
        '--insert-poisson',
        "0.04",
        '--double-cut-weight',
        "3.3",
        '--num-barcodes',
        1,
        '--min-uniq-alleles',
        50,
        '--max-uniq-alleles',
        100,
        '--max-abundance',
        200,
    ]
    return env.Command(
        [
            join(outdir, 'obs_data.pkl'),
            join(outdir, 'true_model.pkl'),
            join(outdir, 'log_generate.txt')],
        [],
        ' '.join(map(str, cmd)))

@nest.add_target_with_env(localenv)
def restrict_observed_alleles(env, outdir, c):
    cmd = [
        'python restrict_observed_barcodes.py',
        '--obs-file ${SOURCES[0]}',
        '--model-file ${SOURCES[1]}',
        '--num-barcodes 1',
        '--out-obs-file ${TARGETS[0]}',
        '--out-collapsed-tree-file ${TARGETS[1]}',
        '--log-file ${TARGETS[2]}',
    ]
    return env.Command(
        [
            join(outdir, 'obs_data_restrict.pkl'),
            join(outdir, 'collapsed_tree.pkl'),
            join(outdir, 'log_restrict.txt')],
        c['generate'],
        ' '.join(map(str, cmd)))

@nest.add_target_with_env(localenv)
def run_parsimony(env, outdir, c):
    cmd = [
        'python get_parsimony_topologies.py',
        '--obs-file ${SOURCES[0]}',
        '--out-template-file ${TARGETS[0]}',
        '--num-jumbles 1',
        '--max-random',
        0,
        '--max-random-multifurc',
        10,
    ]
    return env.Command(
        [
            join(outdir, 'parsimony_tree0.pkl'),
            join(outdir, 'log_parsimony.txt')],
        c['restrict_observed_alleles'],
        ' '.join(map(str, cmd)))

@nest.add_target_with_env(localenv)
def run_MLE(env, outdir, c):
    cmd = [
        'python run_estimator.py',
        '--obs-file ${SOURCES[0]}',
        '--topology-file ${SOURCES[1]}',
        '--true-model-file ${SOURCES[2]}',
        '--true-collapsed-tree-file ${SOURCES[3]}',
        '--seed 40',
        '--max-iters 6000',
    ]
    return env.Command(
        [
            join(outdir, 'parsimony_tree0_fitted.pkl'),
            join(outdir, 'parsimony_tree0_fit_log.txt')],
        [
            c['restrict_observed_alleles'][0],
            c['run_parsimony'][0],
            c['generate'][1],
            c['restrict_observed_alleles'][1]],
        ' '.join(map(str, cmd)))
